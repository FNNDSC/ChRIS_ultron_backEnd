# an ephemeral instance of ChRIS backend services for local development
#
# warning: /var/run/docker.sock is mounted into some services (notably pman)

services:
  chrisomatic:
    image: ghcr.io/fnndsc/chrisomatic:0.8.2
    profiles:
      - tools
    volumes:
      - "./chrisomatic/chrisomatic.yml:/chrisomatic.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    userns_mode: host
    depends_on:
      - chris
    networks:
      - local

  cube_local:
    image: cube:latest-local
    build:
      context: .
      dockerfile_inline: |
        FROM ghcr.io/fnndsc/cube:latest

        RUN mkdir -p /opt
        COPY ./requirements /opt/requirements
        RUN pip install -r /opt/requirements/local.txt
    command: sh -c 'exit 0'

  db_migrate:
    image: cube:latest-local
    command:
      - sh
      - -c
      - python manage.py migrate --noinput
    volumes:
      - chris_files:/var/chris:rw
      - ./chris_backend:/opt/app-root/src:ro
      - .:/opt/ChRIS_ultron_backEnd:ro
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - STORAGE_ENV=fslink
    depends_on:
      cube_local:
        condition: service_completed_successfully
      chris_dev_db:
        condition: service_healthy
    networks:
      - local

  chris:
    container_name: chris
    image: cube:latest-local
    command:
      - sh
      - -c
      - python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - chris_files:/var/chris:rw
      - ./chris_backend:/opt/app-root/src:ro
      - .:/opt/ChRIS_ultron_backEnd:ro
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - STORAGE_ENV=fslink
    depends_on:
      cube_local:
        condition: service_completed_successfully
      db_migrate:
        condition: service_completed_successfully
      queue:
        condition: service_started
    networks:
      - local
    labels:
      org.chrisproject.role: "ChRIS_ultron_backEnd"
  worker:
    image: cube:latest-local
    command:
      - sh
      - -c
      - celery -A core worker -c 4 -l info -Q main1,main2
    volumes:
      - chris_files:/var/chris:rw
      - ./chris_backend:/opt/app-root/src:ro
      - .:/opt/ChRIS_ultron_backEnd:ro
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - STORAGE_ENV=fslink
    depends_on:
      db_migrate:
        condition: service_completed_successfully
      queue:
        condition: service_started
      pfcon:
        condition: service_started
    restart: unless-stopped
    networks:
      - local
  worker_periodic:
    image: cube:latest-local
    command:
      - sh
      - -c
      - celery -A core worker -c 2 -l info -Q periodic
    volumes:
      - chris_files:/var/chris:rw
      - ./chris_backend:/opt/app-root/src:ro
      - .:/opt/ChRIS_ultron_backEnd:ro
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - STORAGE_ENV=fslink
    depends_on:
      cube_local:
        condition: service_completed_successfully
      db_migrate:
        condition: service_completed_successfully
      queue:
        condition: service_started
    restart: unless-stopped
    networks:
      - local
  scheduler:
    image: cube:latest-local
    command:
      - sh
      - -c
      - celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - chris_files:/var/chris:rw
      - ./chris_backend:/opt/app-root/src:ro
      - .:/opt/ChRIS_ultron_backEnd:ro
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - STORAGE_ENV=fslink
    depends_on:
      cube_local:
        condition: service_completed_successfully
      db_migrate:
        condition: service_completed_successfully
      queue:
        condition: service_started
    restart: unless-stopped
    networks:
      - local
  chris_dev_db:
    image: docker.io/library/postgres:16
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chris_dev
      - POSTGRES_USER=chris
      - POSTGRES_PASSWORD=Chris1234
    networks:
      - local
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 2s
      timeout: 4s
      retries: 3
      start_period: 60s
  queue:
    image: docker.io/library/rabbitmq:3
    restart: unless-stopped
    networks:
      - local

  pfcon:
    container_name: pfcon
    image: ghcr.io/fnndsc/pfcon:5.2.2
    environment:
      COMPUTE_SERVICE_URL: http://pman:5010/api/v1/
      SECRET_KEY: secret
      PFCON_USER: pfcon
      PFCON_PASSWORD: pfcon1234
      PFCON_INNETWORK: "true"
      STORAGE_ENV: filesystem
      STOREBASE_MOUNT: /var/local/storeBase
    ports:
      - "5005:5005"
    volumes:
      - chris_files:/var/local/storeBase
    networks:
      local:
        aliases:
          - pfcon.host
      remote:
    labels:
      org.chrisproject.role: "pfcon"
    user: "1001"

  pman:
    image: ghcr.io/fnndsc/pman:6.2.0
    container_name: pman
    environment:
      CONTAINER_ENV: docker
      CONTAINER_USER: "1001:"
      ENABLE_HOME_WORKAROUND: "yes"
      JOB_LABELS: "org.chrisproject.miniChRIS=plugininstance"
      SECRET_KEY: secret
      REMOVE_JOBS: "yes"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    depends_on:
      - pfcon
    ports:
      - "5010:5010"
    networks:
      remote:
    userns_mode: "host"
    labels:
      org.chrisproject.role: "pman"

  chris_ui:
    image: ghcr.io/fnndsc/chris_ui:latest-staging
    command: sirv --host --single
    environment:
      VITE_APP_CHRIS_UI_URL: http://localhost:8000/api/v1/
      VITE_APP_PFDCM_URL: http://localhost:4005/
    ports:
      - "8020:3000"

  orthanc:
    image: docker.io/jodogne/orthanc-plugins:1.12.3
    volumes:
      - ./orthanc.json:/etc/orthanc/orthanc.json:ro
      - orthanc:/var/lib/orthanc/db
    ports:
      - "4242:4242"
      - "8042:8042"
    networks:
      - pacs
    profiles:
      - pacs
      - orthanc

  pfdcm:
    image: ghcr.io/fnndsc/pfdcm:3.1.22
    container_name: pfdcm
    environment:
      MAX_WORKERS: 1
    volumes:
      - pfdcm:/home/dicom:rw
      - ./pfdcm-services:/home/dicom/services:ro
      - chris_files:/chris_files:rw
    ports:
      - "4005:4005"
    networks:
      - pacs
    user: "1001"
    profiles:
      - pacs
  pfbridge:
    image: docker.io/fnndsc/pfbridge:3.7.8
    container_name: pfbridge
    environment:
      MAX_WORKERS: 1
      PFLINK_USERNAME: pflink
      PFLINK_PASSWORD: pflink1234
      NAME: PFDCMLOCAL
      PACSNAME: orthanc
      CUBEANDSWIFTKEY: local
    ports:
      - "33333:33333"
    networks:
      local:
      pflink:
    profiles:
      - pflink

  pflink:
    image: docker.io/fnndsc/pflink:4.0.6
    container_name: pflink
    restart: unless-stopped
    environment:
      PFDCM_NAME: "NOTPFDCMLOCAL" # work around for hard-coded edge case
      PFLINK_MONGODB: "mongodb://pflink-db:27017"
      PFLINK_PFDCM: "http://pfdcm:4005"
      PFLINK_PORT: "4010"
    ports:
      - "4010:4010"
    networks:
      local:
      pflink:
    depends_on:
      - pflink-db
    profiles:
      - pflink

  pflink-db:
    image: mongo
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - pflink-db-data:/data/db
    restart: unless-stopped
    networks:
      pflink:
    profiles:
      - pflink

  # Non-root container user workarounds

  cube-nonroot-user-volume-fix:
    image: docker.io/library/alpine:latest
    volumes:
      - chris_files:/data:rw
    user: root
    command: chmod g+rwx /data
    restart: "no"

  pfdcm-nonroot-user-volume-fix:
    image: docker.io/library/alpine:latest
    volumes:
      - pfdcm:/home/dicom:rw
    user: root
    command: chown 1001 /home/dicom
    restart: "no"

networks:
  local:
  remote:
  pacs:
  monitoring:
  pflink:

volumes:
  chris_files:
  db_data:
  orthanc:
  pfdcm:
  grafana_data:
  openobserve_data:
  pflink-db-data:

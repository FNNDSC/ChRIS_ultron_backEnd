# https://docs.docker.com/compose/yml/
# Each service defined in docker-compose.yml must specify exactly one of
# image or build. Other keys are optional, and are analogous to their
# docker run command-line counterparts.
#
# As with docker run, options specified in the Dockerfile (e.g., CMD,
# EXPOSE, VOLUME, ENV) are respected by default - you don't need to
# specify them again in docker-compose.yml.
#
# Fedora (and RHEL, CentOS) use SELinux.
# Docker needs :z volume mount options to provide a context label.
# See man docker-run

#version: '3.7'

services:

  pfcon:
    image: ${PFCON_IMAGE-fnndsc/pfcon}
    # We need to mount a physical dir in the HOST onto the key store in pfcon. This dir
    # is given by the STOREBASE env variable.
    volumes:
      - ${STOREBASE:?}:/var/local/storeBase:z
    ports:
      - "30005:30005"
    command: ["gunicorn", "-w", "5", "-b", "0.0.0.0:30005", "-t",  "200", "pfcon.wsgi:application"]
    depends_on:
      - pman
    environment:
      # The SWIFT-related env variables are not needed/used when PFCON_INNETWORK is false
      - SECRET_KEY="q3kyu^l=@pnsf!5piqz6!!5kdcdpo86y6jebbp+2244yjm*#+k"
      - PFCON_USER=pfcon
      - PFCON_PASSWORD=pfcon1234
      - COMPUTE_SERVICE_URL=http://pman:5010/api/v1/
      - PFCON_INNETWORK
      - STORAGE_ENV
      - SWIFT_AUTH_URL=http://swift_service:8080/auth/v1.0
      - SWIFT_USERNAME=chris:chris1234
      - SWIFT_KEY=testing
      - SWIFT_CONTAINER_NAME=users
    networks:
      local:
      remote:
        aliases:
          - pfcon.remote
    labels:
      name: "pfcon"
      role: "pfcon service"

  pman:
    # Since pman spins off containers of its own it needs to mount storeBase dir (where
    # pfcon shares the data) into the spawned container. This directory is passed in the
    # STOREBASE env variable.
    environment:
      - STORAGE_TYPE=host
      - STOREBASE
      - SECRET_KEY="w1kxu^l=@pnsf!5piqz6!!5kdcdpo79y6jebbp+2244yjm*#+k"
      - CONTAINER_ENV=swarm
    image: ${PMAN_IMAGE-fnndsc/pman}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:z
    deploy:
      placement:
        constraints:
          - "node.role==manager"
    networks:
      - local
    labels:
      name: "pman"
      role: "pman service"


networks:
  local:
  remote:
    external: true
